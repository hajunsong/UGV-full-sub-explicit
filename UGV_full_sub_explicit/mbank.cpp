#include "UnmannedGroundVehicle.h"

/***********************************************************************
subroutine skew_symmetric(a,b)
B(3x3)=A(3x1)(~)
***********************************************************************/
void UnmannedGroundVehicle::tilde(double a[3], double b[3][3])
{
	b[0][0] = 0;
	b[0][1] = -a[2];
	b[0][2] = a[1];
	b[1][0] = a[2];
	b[1][1] = 0;
	b[1][2] = -a[0];
	b[2][0] = -a[1];
	b[2][1] = a[0];
	b[2][2] = 0;
}

/***********************************************************************
subroutine mat3333(a,b,c)
C(3x3)=A(3x3)*B(3x3)
***********************************************************************/
void UnmannedGroundVehicle::mat3333(double a[3][3], double b[3][3], double c[3][3])
{
	c[0][0] = a[0][0] * b[0][0] + a[0][1] * b[1][0] + a[0][2] * b[2][0];
	c[0][1] = a[0][0] * b[0][1] + a[0][1] * b[1][1] + a[0][2] * b[2][1];
	c[0][2] = a[0][0] * b[0][2] + a[0][1] * b[1][2] + a[0][2] * b[2][2];
	c[1][0] = a[1][0] * b[0][0] + a[1][1] * b[1][0] + a[1][2] * b[2][0];
	c[1][1] = a[1][0] * b[0][1] + a[1][1] * b[1][1] + a[1][2] * b[2][1];
	c[1][2] = a[1][0] * b[0][2] + a[1][1] * b[1][2] + a[1][2] * b[2][2];
	c[2][0] = a[2][0] * b[0][0] + a[2][1] * b[1][0] + a[2][2] * b[2][0];
	c[2][1] = a[2][0] * b[0][1] + a[2][1] * b[1][1] + a[2][2] * b[2][1];
	c[2][2] = a[2][0] * b[0][2] + a[2][1] * b[1][2] + a[2][2] * b[2][2];
}

/***********************************************************************
subroutine mat3331(a,b,c)
c(3x1)=A(3x3)*B(3x1)
***********************************************************************/
void UnmannedGroundVehicle::mat3331(double a[3][3], double b[3], double c[3])
{
	c[0] = a[0][0] * b[0] + a[0][1] * b[1] + a[0][2] * b[2];
	c[1] = a[1][0] * b[0] + a[1][1] * b[1] + a[1][2] * b[2];
	c[2] = a[2][0] * b[0] + a[2][1] * b[1] + a[2][2] * b[2];
}

/***********************************************************************
subroutine mat333333(a,b,c,d)
D(3x3)=A(3x3)*B(3x3)*C(3x3)
***********************************************************************/
void UnmannedGroundVehicle::mat333333(double a[3][3], double b[3][3], double c[3][3], double d[3][3])
{
	d[0][0] = (a[0][0] * b[0][0] + a[0][1] * b[1][0] + a[0][2] * b[2][0])*c[0][0] + (a[0][0] * b[0][1] + a[0][1] * b[1][1] + a[0][2] * b[2][1])*c[1][0] + (a[0][0] * b[0][2] + a[0][1] * b[1][2] + a[0][2] * b[2][2])*c[2][0];
	d[0][1] = (a[0][0] * b[0][0] + a[0][1] * b[1][0] + a[0][2] * b[2][0])*c[0][1] + (a[0][0] * b[0][1] + a[0][1] * b[1][1] + a[0][2] * b[2][1])*c[1][1] + (a[0][0] * b[0][2] + a[0][1] * b[1][2] + a[0][2] * b[2][2])*c[2][1];
	d[0][2] = (a[0][0] * b[0][0] + a[0][1] * b[1][0] + a[0][2] * b[2][0])*c[0][2] + (a[0][0] * b[0][1] + a[0][1] * b[1][1] + a[0][2] * b[2][1])*c[1][2] + (a[0][0] * b[0][2] + a[0][1] * b[1][2] + a[0][2] * b[2][2])*c[2][2];
	d[1][0] = (a[1][0] * b[0][0] + a[1][1] * b[1][0] + a[1][2] * b[2][0])*c[0][0] + (a[1][0] * b[0][1] + a[1][1] * b[1][1] + a[1][2] * b[2][1])*c[1][0] + (a[1][0] * b[0][2] + a[1][1] * b[1][2] + a[1][2] * b[2][2])*c[2][0];
	d[1][1] = (a[1][0] * b[0][0] + a[1][1] * b[1][0] + a[1][2] * b[2][0])*c[0][1] + (a[1][0] * b[0][1] + a[1][1] * b[1][1] + a[1][2] * b[2][1])*c[1][1] + (a[1][0] * b[0][2] + a[1][1] * b[1][2] + a[1][2] * b[2][2])*c[2][1];
	d[1][2] = (a[1][0] * b[0][0] + a[1][1] * b[1][0] + a[1][2] * b[2][0])*c[0][2] + (a[1][0] * b[0][1] + a[1][1] * b[1][1] + a[1][2] * b[2][1])*c[1][2] + (a[1][0] * b[0][2] + a[1][1] * b[1][2] + a[1][2] * b[2][2])*c[2][2];
	d[2][0] = (a[2][0] * b[0][0] + a[2][1] * b[1][0] + a[2][2] * b[2][0])*c[0][0] + (a[2][0] * b[0][1] + a[2][1] * b[1][1] + a[2][2] * b[2][1])*c[1][0] + (a[2][0] * b[0][2] + a[2][1] * b[1][2] + a[2][2] * b[2][2])*c[2][0];
	d[2][1] = (a[2][0] * b[0][0] + a[2][1] * b[1][0] + a[2][2] * b[2][0])*c[0][1] + (a[2][0] * b[0][1] + a[2][1] * b[1][1] + a[2][2] * b[2][1])*c[1][1] + (a[2][0] * b[0][2] + a[2][1] * b[1][2] + a[2][2] * b[2][2])*c[2][1];
	d[2][2] = (a[2][0] * b[0][0] + a[2][1] * b[1][0] + a[2][2] * b[2][0])*c[0][2] + (a[2][0] * b[0][1] + a[2][1] * b[1][1] + a[2][2] * b[2][1])*c[1][2] + (a[2][0] * b[0][2] + a[2][1] * b[1][2] + a[2][2] * b[2][2])*c[2][2];
}

/***********************************************************************
subroutine mat33T31(a,b,c)
C(3x1)=A(3x3)'*B(3x1)
***********************************************************************/
void UnmannedGroundVehicle::mat33T31(double a[3][3], double b[3], double c[3])
{
	c[0] = a[0][0] * b[0] + a[1][0] * b[1] + a[2][0] * b[2];
	c[1] = a[0][1] * b[0] + a[1][1] * b[1] + a[2][1] * b[2];
	c[2] = a[0][2] * b[0] + a[1][2] * b[1] + a[2][2] * b[2];
}

/***********************************************************************
subroutine mat34T31(a,b,c)
C(4x1)=A(3x4)'*B(3x1)
***********************************************************************/
void UnmannedGroundVehicle::mat34T31(double a[3][4], double b[3], double c[4])
{
	c[0] = a[0][0] * b[0] + a[1][0] * b[1] + a[2][0] * b[2];
	c[1] = a[0][1] * b[0] + a[1][1] * b[1] + a[2][1] * b[2];
	c[2] = a[0][2] * b[0] + a[1][2] * b[1] + a[2][2] * b[2];
	c[3] = a[0][3] * b[0] + a[1][3] * b[1] + a[2][3] * b[2];
}

/***********************************************************************
subroutine mat3333T(a,b,c)
C(3x3)=A(3x3)*B(3x3)'
***********************************************************************/
void UnmannedGroundVehicle::mat3333T(double a[3][3], double b[3][3], double c[3][3])
{
	c[0][0] = a[0][0] * b[0][0] + a[0][1] * b[0][1] + a[0][2] * b[0][2];
	c[0][1] = a[0][0] * b[1][0] + a[0][1] * b[1][1] + a[0][2] * b[1][2];
	c[0][2] = a[0][0] * b[2][0] + a[0][1] * b[2][1] + a[0][2] * b[2][2];
	c[1][0] = a[1][0] * b[0][0] + a[1][1] * b[0][1] + a[1][2] * b[0][2];
	c[1][1] = a[1][0] * b[1][0] + a[1][1] * b[1][1] + a[1][2] * b[1][2];
	c[1][2] = a[1][0] * b[2][0] + a[1][1] * b[2][1] + a[1][2] * b[2][2];
	c[2][0] = a[2][0] * b[0][0] + a[2][1] * b[0][1] + a[2][2] * b[0][2];
	c[2][1] = a[2][0] * b[1][0] + a[2][1] * b[1][1] + a[2][2] * b[1][2];
	c[2][2] = a[2][0] * b[2][0] + a[2][1] * b[2][1] + a[2][2] * b[2][2];
}

/***********************************************************************
subroutine mat333331(a,b,c,d)
D(3x1)=A(3x3)*B(3x3)*C(3x1)
***********************************************************************/
void UnmannedGroundVehicle::mat333331(double a[3][3], double b[3][3], double c[3], double d[3])
{
	d[0] = (a[0][0] * b[0][0] + a[0][1] * b[1][0] + a[0][2] * b[2][0]) * c[0] + (a[0][0] * b[0][1] + a[0][1] * b[1][1] + a[0][2] * b[2][1]) * c[1] + (a[0][0] * b[0][2] + a[0][1] * b[1][2] + a[0][2] * b[2][2]) * c[2];
	d[1] = (a[1][0] * b[0][0] + a[1][1] * b[1][0] + a[1][2] * b[2][0]) * c[0] + (a[1][0] * b[0][1] + a[1][1] * b[1][1] + a[1][2] * b[2][1]) * c[1] + (a[1][0] * b[0][2] + a[1][1] * b[1][2] + a[1][2] * b[2][2]) * c[2];
	d[2] = (a[2][0] * b[0][0] + a[2][1] * b[1][0] + a[2][2] * b[2][0]) * c[0] + (a[2][0] * b[0][1] + a[2][1] * b[1][1] + a[2][2] * b[2][1]) * c[1] + (a[2][0] * b[0][2] + a[2][1] * b[1][2] + a[2][2] * b[2][2]) * c[2];
}

/***********************************************************************
subroutine mat6661(a,b,c)
C(6x1)=A(6x6)*B(6x1)
***********************************************************************/
void UnmannedGroundVehicle::mat6661(double a[6][6], double b[6], double c[6])
{
	c[0] = a[0][0] * b[0] + a[0][1] * b[1] + a[0][2] * b[2] + a[0][3] * b[3] + a[0][4] * b[4] + a[0][5] * b[5];
	c[1] = a[1][0] * b[0] + a[1][1] * b[1] + a[1][2] * b[2] + a[1][3] * b[3] + a[1][4] * b[4] + a[1][5] * b[5];
	c[2] = a[2][0] * b[0] + a[2][1] * b[1] + a[2][2] * b[2] + a[2][3] * b[3] + a[2][4] * b[4] + a[2][5] * b[5];
	c[3] = a[3][0] * b[0] + a[3][1] * b[1] + a[3][2] * b[2] + a[3][3] * b[3] + a[3][4] * b[4] + a[3][5] * b[5];
	c[4] = a[4][0] * b[0] + a[4][1] * b[1] + a[4][2] * b[2] + a[4][3] * b[3] + a[4][4] * b[4] + a[4][5] * b[5];
	c[5] = a[5][0] * b[0] + a[5][1] * b[1] + a[5][2] * b[2] + a[5][3] * b[3] + a[5][4] * b[4] + a[5][5] * b[5];
}

/**********************************************************************
subroutine mat61T61(a,b,c)
C(1X1)=A(6X1)'B(6X1)
***********************************************************************/
void UnmannedGroundVehicle::mat61T61(double a[6], double b[6], double *c)
{
	*c = a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3] + a[4] * b[4] + a[5] * b[5];
}

/**********************************************************************
subroutine mat6161T(a,b,c)
C(6X6)=A(6X1)B(6X1)'
***********************************************************************/
void UnmannedGroundVehicle::mat6161T(double a[6], double b[6], double c[6][6])
{
	c[0][0] = a[0] * b[0];
	c[0][1] = a[0] * b[1];
	c[0][2] = a[0] * b[2];
	c[0][3] = a[0] * b[3];
	c[0][4] = a[0] * b[4];
	c[0][5] = a[0] * b[5];
	c[1][0] = a[1] * b[0];
	c[1][1] = a[1] * b[1];
	c[1][2] = a[1] * b[2];
	c[1][3] = a[1] * b[3];
	c[1][4] = a[1] * b[4];
	c[1][5] = a[1] * b[5];
	c[2][0] = a[2] * b[0];
	c[2][1] = a[2] * b[1];
	c[2][2] = a[2] * b[2];
	c[2][3] = a[2] * b[3];
	c[2][4] = a[2] * b[4];
	c[2][5] = a[2] * b[5];
	c[3][0] = a[3] * b[0];
	c[3][1] = a[3] * b[1];
	c[3][2] = a[3] * b[2];
	c[3][3] = a[3] * b[3];
	c[3][4] = a[3] * b[4];
	c[3][5] = a[3] * b[5];
	c[4][0] = a[4] * b[0];
	c[4][1] = a[4] * b[1];
	c[4][2] = a[4] * b[2];
	c[4][3] = a[4] * b[3];
	c[4][4] = a[4] * b[4];
	c[4][5] = a[4] * b[5];
	c[5][0] = a[5] * b[0];
	c[5][1] = a[5] * b[1];
	c[5][2] = a[5] * b[2];
	c[5][3] = a[5] * b[3];
	c[5][4] = a[5] * b[4];
	c[5][5] = a[5] * b[5];

}

void UnmannedGroundVehicle::mat333333T(double a[3][3], double b[3][3], double c[3][3], double d[3][3]) {
	d[0][0] = (a[0][0] * b[0][0] + a[0][1] * b[1][0] + a[0][2] * b[2][0]) * c[0][0] + (a[0][0] * b[0][1] + a[0][1] * b[1][1] + a[0][2] * b[2][1]) * c[0][1] + (a[0][0] * b[0][2] + a[0][1] * b[1][2] + a[0][2] * b[2][2]) * c[0][2];
	d[0][1] = (a[0][0] * b[0][0] + a[0][1] * b[1][0] + a[0][2] * b[2][0]) * c[1][0] + (a[0][0] * b[0][1] + a[0][1] * b[1][1] + a[0][2] * b[2][1]) * c[1][1] + (a[0][0] * b[0][2] + a[0][1] * b[1][2] + a[0][2] * b[2][2]) * c[1][2];
	d[0][2] = (a[0][0] * b[0][0] + a[0][1] * b[1][0] + a[0][2] * b[2][0]) * c[2][0] + (a[0][0] * b[0][1] + a[0][1] * b[1][1] + a[0][2] * b[2][1]) * c[2][1] + (a[0][0] * b[0][2] + a[0][1] * b[1][2] + a[0][2] * b[2][2]) * c[2][2];
	d[1][0] = (a[1][0] * b[0][0] + a[1][1] * b[1][0] + a[1][2] * b[2][0]) * c[0][0] + (a[1][0] * b[0][1] + a[1][1] * b[1][1] + a[1][2] * b[2][1]) * c[0][1] + (a[1][0] * b[0][2] + a[1][1] * b[1][2] + a[1][2] * b[2][2]) * c[0][2];
	d[1][1] = (a[1][0] * b[0][0] + a[1][1] * b[1][0] + a[1][2] * b[2][0]) * c[1][0] + (a[1][0] * b[0][1] + a[1][1] * b[1][1] + a[1][2] * b[2][1]) * c[1][1] + (a[1][0] * b[0][2] + a[1][1] * b[1][2] + a[1][2] * b[2][2]) * c[1][2];
	d[1][2] = (a[1][0] * b[0][0] + a[1][1] * b[1][0] + a[1][2] * b[2][0]) * c[2][0] + (a[1][0] * b[0][1] + a[1][1] * b[1][1] + a[1][2] * b[2][1]) * c[2][1] + (a[1][0] * b[0][2] + a[1][1] * b[1][2] + a[1][2] * b[2][2]) * c[2][2];
	d[2][0] = (a[2][0] * b[0][0] + a[2][1] * b[1][0] + a[2][2] * b[2][0]) * c[0][0] + (a[2][0] * b[0][1] + a[2][1] * b[1][1] + a[2][2] * b[2][1]) * c[0][1] + (a[2][0] * b[0][2] + a[2][1] * b[1][2] + a[2][2] * b[2][2]) * c[0][2];
	d[2][1] = (a[2][0] * b[0][0] + a[2][1] * b[1][0] + a[2][2] * b[2][0]) * c[1][0] + (a[2][0] * b[0][1] + a[2][1] * b[1][1] + a[2][2] * b[2][1]) * c[1][1] + (a[2][0] * b[0][2] + a[2][1] * b[1][2] + a[2][2] * b[2][2]) * c[1][2];
	d[2][2] = (a[2][0] * b[0][0] + a[2][1] * b[1][0] + a[2][2] * b[2][0]) * c[2][0] + (a[2][0] * b[0][1] + a[2][1] * b[1][1] + a[2][2] * b[2][1]) * c[2][1] + (a[2][0] * b[0][2] + a[2][1] * b[1][2] + a[2][2] * b[2][2]) * c[2][2];
}

void UnmannedGroundVehicle::mat3334(double a[3][3], double b[3][4], double c[3][4]) {
	c[0][0] = a[0][0] * b[0][0] + a[0][1] * b[1][0] + a[0][2] * b[2][0];
	c[0][1] = a[0][0] * b[0][1] + a[0][1] * b[1][1] + a[0][2] * b[2][1];
	c[0][2] = a[0][0] * b[0][2] + a[0][1] * b[1][2] + a[0][2] * b[2][2];
	c[0][3] = a[0][0] * b[0][3] + a[0][1] * b[1][3] + a[0][2] * b[2][3];
	c[1][0] = a[1][0] * b[0][0] + a[1][1] * b[1][0] + a[1][2] * b[2][0];
	c[1][1] = a[1][0] * b[0][1] + a[1][1] * b[1][1] + a[1][2] * b[2][1];
	c[1][2] = a[1][0] * b[0][2] + a[1][1] * b[1][2] + a[1][2] * b[2][2];
	c[1][3] = a[1][0] * b[0][3] + a[1][1] * b[1][3] + a[1][2] * b[2][3];
	c[2][0] = a[2][0] * b[0][0] + a[2][1] * b[1][0] + a[2][2] * b[2][0];
	c[2][1] = a[2][0] * b[0][1] + a[2][1] * b[1][1] + a[2][2] * b[2][1];
	c[2][2] = a[2][0] * b[0][2] + a[2][1] * b[1][2] + a[2][2] * b[2][2];
	c[2][3] = a[2][0] * b[0][3] + a[2][1] * b[1][3] + a[2][2] * b[2][3];
}

void UnmannedGroundVehicle::mat33T34(double a[3][3], double b[3][4], double c[3][4]) {
	c[0][0] = a[0][0] * b[0][0] + a[1][0] * b[1][0] + a[2][0] * b[2][0];
	c[0][1] = a[0][0] * b[0][1] + a[1][0] * b[1][1] + a[2][0] * b[2][1];
	c[0][2] = a[0][0] * b[0][2] + a[1][0] * b[1][2] + a[2][0] * b[2][2];
	c[0][3] = a[0][0] * b[0][3] + a[1][0] * b[1][3] + a[2][0] * b[2][3];
	c[1][0] = a[0][1] * b[0][0] + a[1][1] * b[1][0] + a[2][1] * b[2][0];
	c[1][1] = a[0][1] * b[0][1] + a[1][1] * b[1][1] + a[2][1] * b[2][1];
	c[1][2] = a[0][1] * b[0][2] + a[1][1] * b[1][2] + a[2][1] * b[2][2];
	c[1][3] = a[0][1] * b[0][3] + a[1][1] * b[1][3] + a[2][1] * b[2][3];
	c[2][0] = a[0][2] * b[0][0] + a[1][2] * b[1][0] + a[2][2] * b[2][0];
	c[2][1] = a[0][2] * b[0][1] + a[1][2] * b[1][1] + a[2][2] * b[2][1];
	c[2][2] = a[0][2] * b[0][2] + a[1][2] * b[1][2] + a[2][2] * b[2][2];
	c[2][3] = a[0][2] * b[0][3] + a[1][2] * b[1][3] + a[2][2] * b[2][3];
}

double UnmannedGroundVehicle::Find_Max(double Array[], int length)
{
	double MAX = Array[0];
	int i;
	for (i = 1; i < length; i++)
	{
		if (Array[i] > MAX)
		{
			MAX = Array[i];
		}
	}
	return MAX;
}

double UnmannedGroundVehicle::Find_min(double data, double min_val)
{
	if (data < min_val)
		min_val = data;

	return min_val;
}

double UnmannedGroundVehicle::fsign(double data)
{
	if (data > 0)
		return 1.0;
	else if (data < 0)
		return -1.0;
	else
		return 0;
}
void UnmannedGroundVehicle::ludcmp4(double a[4][4], int n, int indx[4], double d, double fac[4][4])
{
	int i, imax, j, k;
	double big, temp;
	double vv[4];

	for (i = 0; i < n; i++) {
		big = 0.0;
		for (j = 0; j < n; j++)
			if ((temp = fabs(a[i][j])) > big) big = temp;
		if (big == 0.0) {
			printf("Singular matrix in LUdcmp - controller");
		}
		vv[i] = 1.0 / big;
	}
	for (k = 0; k < n; k++) {
		big = 0.0;
		for (i = k; i < n; i++) {
			temp = vv[i] * fabs(a[i][k]);
			if (temp > big) {
				big = temp;
				imax = i;
			}
		}
		if (k != imax) {
			for (j = 0; j < n; j++) {
				temp = a[imax][j];
				a[imax][j] = a[k][j];
				a[k][j] = temp;
			}
			d = -d;
			vv[imax] = vv[k];
		}
		indx[k] = imax;
		if (a[k][k] == 0.0) a[k][k] = TINY;
		for (i = k + 1; i < n; i++) {
			temp = a[i][k] /= a[k][k];
			for (j = k + 1; j < n; j++)
				a[i][j] -= temp * a[k][j];
		}
	}
	//////////////////
	for (i = 0; i < 4; i++)
		for (j = 0; j < 4; j++)
			fac[i][j] = a[i][j];
	//////////////////
}

void UnmannedGroundVehicle::lubksb4(double a[4][4], int n, int indx[4], double b[4], double x[4])
{
	int i, ii = 0, ip, j;
	double sum;
	for (i = 0; i < n; i++) x[i] = b[i];
	for (i = 0; i < n; i++) {
		ip = indx[i];
		sum = x[ip];
		x[ip] = x[i];
		if (ii != 0)
			for (j = ii - 1; j < i; j++) sum -= a[i][j] * x[j];
		else if (sum != 0.0)
			ii = i + 1;
		x[i] = sum;
	}
	for (i = n - 1; i >= 0; i--) {
		sum = x[i];
		for (j = i + 1; j < n; j++) sum -= a[i][j] * x[j];
		x[i] = sum / a[i][i];
	}
}